//====================================================================================================
// Filename:	Vector2.inl
// Created by:	Peter Chan
//====================================================================================================

//====================================================================================================
// Namespace
//====================================================================================================

namespace Math
{

//====================================================================================================
// Function Definitions
//====================================================================================================
	
inline Vector2 Vector2::Zero()
{
	return Vector2();
}

//----------------------------------------------------------------------------------------------------

inline Vector2 Vector2::XAxis()
{
	return Vector2(1.0f, 0.0f);
}

//----------------------------------------------------------------------------------------------------

inline Vector2 Vector2::YAxis()
{
	return Vector2(0.0f, 1.0f);
}

//----------------------------------------------------------------------------------------------------

inline Vector2 Vector2::operator-() const
{
	return Vector2(-x, -y);
}

//----------------------------------------------------------------------------------------------------

inline Vector2 Vector2::operator+(const Vector2& rhs) const
{
	return Vector2(x + rhs.x, y + rhs.y);
}

//----------------------------------------------------------------------------------------------------

inline Vector2 Vector2::operator-(const Vector2& rhs) const
{
	return Vector2(x - rhs.x, y - rhs.y);
}

//----------------------------------------------------------------------------------------------------

inline Vector2 Vector2::operator*(f32 s) const
{
	return Vector2(x * s, y * s);
}

//----------------------------------------------------------------------------------------------------

inline Vector2 Vector2::operator/(f32 s) const
{
	ASSERT(s != 0.0f, "[Math] Cannot divide by zero!");
	const f32 inv = 1.0f / s;
	return Vector2(x * inv, y * inv);
}

//----------------------------------------------------------------------------------------------------

inline Vector2& Vector2::operator+=(const Vector2& rhs)
{
	x += rhs.x;
	y += rhs.y;
	return *this;
}

//----------------------------------------------------------------------------------------------------

inline Vector2& Vector2::operator-=(const Vector2& rhs)
{
	x -= rhs.x;
	y -= rhs.y;
	return *this;
}

//----------------------------------------------------------------------------------------------------

inline Vector2& Vector2::operator*=(f32 s)
{
	x *= s;
	y *= s;
	return *this;
}

//----------------------------------------------------------------------------------------------------

inline Vector2& Vector2::operator/=(f32 s)
{
	ASSERT(s != 0.0f, "[Math] Cannot divide by zero!");
	const f32 inv = 1.0f / s;
	x *= inv;
	y *= inv;
	return *this;
}

//----------------------------------------------------------------------------------------------------

inline bool operator==(const Vector2& lhs, const Vector2& rhs)
{
    return (lhs.x == rhs.x
            && lhs.y == rhs.y);
}

//----------------------------------------------------------------------------------------------------

inline bool operator!=(const Vector2& lhs, const Vector2& rhs)
{
    return !(lhs == rhs);
}

} // namespace Math